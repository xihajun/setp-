# usage ckrename <only_one_keywords> <suffix: SLOW>
ckrename() {
    # Generate the list command
    local cmd="ck list local:experiment:*"

    # If there are arguments, add them to the command
    if [ $# -gt 0 ]; then
        cmd+="$1*"
    fi

    # Run the list command and print the results
    local experiments=$(eval $cmd)
    echo "Matching experiments:"
    echo "$experiments"
    # Generate the rename command
    local suffix=$2
    local i=1
    for exp in $experiments
    do
        local new_name="${exp}_${suffix}"
        local rename_cmd="ck rename local:experiment:$exp local:experiment:$new_name"
        echo "Running command: $rename_cmd"
        eval $rename_cmd
        ((i++))
    done
}

# usage ckzip <keywords> <keywords>
ckzip() {
    # Generate the zip command
    local cmd="ck zip local:experiment:*"

    # If there are arguments, add them to the command
    if [ $# -gt 0 ]; then
        for arg in "$@"
        do
            cmd+="*$arg"
        done
        cmd+="*"
    fi

    # Add the archive name with the current date and hostname
    local archive_name="~/mlperf_v3.0-closed-$(hostname)_$(date +"%Y%m%d").zip"
    cmd+=" --archive_name=$archive_name"

    # Print the command
    echo "Running command: $cmd"

    # Run the command
    $cmd
}


# usage ckremove <keyword> <keyword> ..
ckremove() {
    # Generate the remove command
    local cmd="ck rm local:experiment:*"

    # If there are arguments, add them to the command
    if [ $# -gt 0 ]; then
        for arg in "$@"
        do
            cmd+="*$arg"
        done
        cmd+="*"
    fi

    # Print the command
    echo "Running command: $cmd"

    # Run the command
    $cmd
}

# usage cklist <keyword> <keyword> ..
cklist() {
    # Generate the list command
    local cmd="ck list local:experiment:*"

    # If there are arguments, add them to the command
    if [ $# -gt 0 ]; then
        for arg in "$@"
        do
            cmd+="*$arg"
        done
        cmd+="*"
    fi

    # Print the command
    echo "Running command: $cmd"

    # Run the command
    $cmd
}

# usage ckrename_prefix <keywords> <changed_prefix: mlperf_vbackup->
ckrename_prefix_notest_nopower() {
    # Generate the list command
    local cmd="ck list local:experiment:*"

    # If there are arguments, add them to the command
    if [ $# -gt 0 ]; then
        cmd+="$1*"
    fi

    # Run the list command and print the results
    local experiments=$(eval $cmd)
    echo "Matching experiments:"
    echo "$experiments"
    # Generate the rename command
    local ori_prefix="mlperf_v3.0-"
    local changed_prefix=$2
    local i=1
    local auto_cmd_file=~/.auto_cmd
    local auto_reverse_cmd_file=~/.auto_reverse_cmd
    for exp in $experiments
    do
        if  [[ $exp == *"TEST"* ]] || [[ $exp == *"power"* ]]; then
            echo "Ignored: $exp"
            continue
        fi
        local new_name="${exp/$ori_prefix/$changed_prefix}"
        local rename_cmd="ck rename local:experiment:$exp local:experiment:$new_name"
        local reverse_rename_cmd="ck rename local:experiment:$new_name local:experiment:$exp"
        echo "Running command: $rename_cmd"
        echo "$rename_cmd" >> $auto_cmd_file
        echo "$reverse_rename_cmd" >> $auto_reverse_cmd_file
        eval $rename_cmd
        ((i++))
    done
    echo "rename cmd saved to: $auto_cmd_file"
    echo "reverse rename cmd saved to: $auto_reverse_cmd_file"
}

# followed by
# ck zip xxx
# ck add repo --zip=zippedfile.zip
# usage ckcopy <repo1> <repo2>
# will copy xx:experiment:* to yy:experiment:*
ckcopy() {
    from="$1"
    to="$2"

    experiments=$(ck list ${from}:experiment:*)

    for exp in $experiments; do
        ck cp ${from}:experiment:${exp} ${to}:experiment:${exp}
    done
}
